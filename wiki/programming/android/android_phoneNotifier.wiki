Android PhoneNotifier分析

我们从前面的分析可以看到，Android原生App(通过makefile编译到系统中的）可以通过调用Phone的注册监听接口获取Phone及Call通话状态，而第三方应用又如何及时获取手机的状态变更呢？

这就涉及到两个问题，Telephony Framework如何提供监听接口和如何将Phone状态变更信息发送给第三方应用。

`PhoneNotifier.java`作为一个接口，定义了10个通知接口
{{{class="brush: java"
public interface PhoneNotifier {

    public void notifyPhoneState(Phone sender);

    public void notifyServiceState(Phone sender);

    public void notifyCellLocation(Phone sender);

    public void notifySignalStrength(Phone sender);

    public void notifyMessageWaitingChanged(Phone sender);

    public void notifyCallForwardingChanged(Phone sender);

    public void notifyDataConnection(Phone sender, String reason, String apnType,
            Phone.DataState state);

    public void notifyDataConnectionFailed(Phone sender, String reason, String apnType);

    public void notifyDataActivity(Phone sender);

    public void notifyOtaspChanged(Phone sender, int otaspMode);
}
}}}
`DefaultPhoneNotifier.java`
{{{class="brush: java"
public class DefaultPhoneNotifier implements PhoneNotifier {

    static final String LOG_TAG = "GSM";
    private static final boolean DBG = true;
    private ITelephonyRegistry mRegistry;

    /*package*/
    DefaultPhoneNotifier() {
        mRegistry = ITelephonyRegistry.Stub.asInterface(ServiceManager.getService(
                    "telephony.registry"));
    }

    public void notifyPhoneState(Phone sender) {
        Call ringingCall = sender.getRingingCall();
        String incomingNumber = "";
        if (ringingCall != null && ringingCall.getEarliestConnection() != null){
            incomingNumber = ringingCall.getEarliestConnection().getAddress();
        }
        try {
            mRegistry.notifyCallState(convertCallState(sender.getState()), incomingNumber);
        } catch (RemoteException ex) {
            // system process is dead
        }
    }
    ......
}
}}}
从DefaultPhoneNotifier类的实现来看，都是调用ITelephonyRegistry类的相关notifyXXXState(）方法完成的。

而ITelephonyRegistry又是何方神圣？

从DefaultPhoneNotifier获取ITelephonyRegistry实例的方法来看，ITelephonyRegistry应该是一个由ServiceManager管理的名叫"telephony.registry"的服务。

在SystemServer.java中，我们找到了作为系统服务添加到ServiceManager中的TelephonyRegistry
`SystemServer.java`
{{{class="brush: java"
    ......
    Slog.i(TAG, "Telephony Registry");
    ServiceManager.addService("telephony.registry", new TelephonyRegistry(context));
    ......
}}}

TelephonyRegistry作为一个系统服务，为com.android.phone进程与其他进程通信搭建了一个桥梁，TelephonyRegistry继承自ITelephonyRegistry.Stub类，实现了ITelephonyRegistry.aidl接口。我们先看看ITelephonyRegistry.aidl文件内容：
{{{
package com.android.internal.telephony;

import android.content.Intent;
import android.net.LinkProperties;
import android.net.LinkCapabilities;
import android.os.Bundle;
import android.telephony.ServiceState;
import android.telephony.SignalStrength;
import com.android.internal.telephony.IPhoneStateListener;

interface ITelephonyRegistry {
    void listen(String pkg, IPhoneStateListener callback, int events, boolean notifyNow);

    void notifyCallState(int state, String incomingNumber);
    void notifyServiceState(in ServiceState state);
    void notifySignalStrength(in SignalStrength signalStrength);
    void notifyMessageWaitingChanged(boolean mwi);
    void notifyCallForwardingChanged(boolean cfi);
    void notifyDataActivity(int state);
    void notifyDataConnection(int state, boolean isDataConnectivityPossible,
            String reason, String apn, String apnType, in LinkProperties linkProperties,
            in LinkCapabilities linkCapabilities, int networkType, boolean roaming);
    void notifyDataConnectionFailed(String reason, String apnType);
    void notifyCellLocation(in Bundle cellLocation);
    void notifyOtaspChanged(in int otaspMode);
}
}}}
该接口定义了两种方法：
# listen方法供第三方app使用，用于注册Phone事件监听：IPhoneStateListener
# notify方法供phone进程使用，用于通知相关事件。

下面我们看看TelephonyRegistry的实现：
{{{class="brush: java"
class TelephonyRegistry extends ITelephonyRegistry.Stub {
    private static class Record {
        String pkgForDebug;
        IBinder binder;
        IPhoneStateListener callback;
        int events;
    }
    public void listen(String pkgForDebug, IPhoneStateListener callback, int events,
            boolean notifyNow) {
        // Slog.d(TAG, "listen pkg=" + pkgForDebug + " events=0x" +
        // Integer.toHexString(events));
        if (events != 0) {
            /* Checks permission and throws Security exception */
            checkListenerPermission(events);

            synchronized (mRecords) {
                // register
                Record r = null;
                find_and_add: {
                    IBinder b = callback.asBinder();
                    final int N = mRecords.size();
                    for (int i = 0; i < N; i++) {
                        r = mRecords.get(i);
                        if (b == r.binder) {
                            break find_and_add;
                        }
                    }
                    r = new Record();
                    r.binder = b;
                    r.callback = callback;
                    r.pkgForDebug = pkgForDebug;
                    mRecords.add(r);
                }
                int send = events & (events ^ r.events);
                r.events = events;
            }
        }
  }
}
}}}
其中的listen(在第三方应用中调用)方法将注册的IPhoneStateListener构成Record对象，添加到mRecords列表中，当相应的事件触发后，调用phone进程调用notify函数进行通知，并发送广播。我们以notifyCallState为例看看是如何通知其他应用的。
{{{class="brush: java"
    public void notifyCallState(int state, String incomingNumber) {
        if (!checkNotifyPermission("notifyCallState()")) {
            return;
        }
        synchronized (mRecords) {
            mCallState = state;
            mCallIncomingNumber = incomingNumber;
            for (Record r : mRecords) {
                //判断mRecords中是否有注册CALL_STATE的listener
                if ((r.events & PhoneStateListener.LISTEN_CALL_STATE) != 0) {
                    try {
                        //r.callback为注册的IPhoneStateListener对象，调用他的onCallStateChanged(）方法
                        r.callback.onCallStateChanged(state, incomingNumber);
                    } catch (RemoteException ex) {
                        mRemoveList.add(r.binder);
                    }
                }
            }
            handleRemoveListLocked();
        }
        //发送CallStateChanged广播事件
        broadcastCallStateChanged(state, incomingNumber);
    }
    private void broadcastCallStateChanged(int state, String incomingNumber) {
        long ident = Binder.clearCallingIdentity();
        ......
        //发送ACTION_PHONE_STATE_CHANGED事件广播
        Intent intent = new Intent(TelephonyManager.ACTION_PHONE_STATE_CHANGED);
        //将phone状态作为参数添加到intent中
        intent.putExtra(Phone.STATE_KEY, DefaultPhoneNotifier.convertCallState(state).toString());
        //将号码添加到intent中
        if (!TextUtils.isEmpty(incomingNumber)) {
            intent.putExtra(TelephonyManager.EXTRA_INCOMING_NUMBER, incomingNumber);
        }
        mContext.sendBroadcast(intent, android.Manifest.permission.READ_PHONE_STATE);
    }
}}}

