%toc
%template code_3

    = Android Telephony接口分析 =

Telephony Framework为上层应用提供了一系列的与通信有关的API，并在底层通过socket实现与rild 服务的数据交互。
google将telephony framework的实现放在了两个java包中：
* 内部包：frameworks/base/telephony/java/com/android/internal/telephony 
* 公开包：frameworks/base/telephony/com/android/telephony

= 内部包 =
支持所有的telephony功能,只能被Android自带的telephoney应用使用－Phone.apk
内部包中包括所有telephony功能实现类，我们通过Phone.java作为引子进行分析：

=== `Phone.java` === 
[[http://www.oschina.net/code/explore/android-4.0.1/telephony/java/com/android/internal/telephony/Phone.java|android源码]]

{{{class="brush: java"
public interface Phhone{
    ......
    //定义手机状态
    enum State{
        IDLE, RINGING, OFFHOOK;    
    }
    //定义数据业务状态
    enum DataState {
        CONNECTED, CONNECTING, DISCONNECTED, SUSPENDED;
    };
    ......
    //获取Phone的字符串表示，如: GSMPhone，CDMAPhone 
    String getPhoneName();
    //获取Phone的类型，如：PHONE_TYPE_GSM, PHONE_TYPE_CDMA
    int getPhoneType();
    //获取信号强度 
    SignalStrength getSignalStrength();
    
    //注册通话状态改变通知
    void registerForPreciseCallStateChanged(Handler h, int what, Object obj);
    //取消注册   
    void unregisterForPreciseCallStateChanged(Handler h);
    ......
    //拨打电话
    Connection dial(String dialString) throws CallStateException;
    ......
}    
}}}
从上面可以看出， 该接口仅仅定义了可以操作Phone的内部接口，如拨打、接听、拒接电话，获取通话状态，监听通话状态等, 其具体功能的实现是由PhoneBase和具体的GSMPhone或CDMAPhone来实现

=== `PhoneBase.java` ===
[[http://www.oschina.net/code/explore/android-4.0.1/telephony/java/com/android/internal/telephony/PhoneBase.java|android源码]]

PhoneBase是一个抽象类，在继承Handler的基础上实现了Phone接口中通用的部分，实现了Phone接口中注册和取消事件通知的接口：
{{{class="brush: java"
public abstract class PhoneBase extends Handler implements Phone {
    ......
    //声明一个列表，用于保存来电铃声通知的侦听者
    protected final RegistrantList mIncomingRingRegistrants
            = new RegistrantList();
    ......

    protected PhoneNotifier mNotifier;
    protected CommondsInterface ci;
    ......
    //注册来电铃声的事件通知
    public void registerForIncomingRing(
            Handler h, int what, Object obj) {
        checkCorrectThread(h);

        mIncomingRingRegistrants.addUnique(h, what, obj);
    }
}
}}}
从上面的代码看出，PhoneBase使用了监听者模式，将事件的接收者通过registerXXX()函数保存在相应的RegistrantList中，这样，当对应的事件触发后，就可以通知到所有对该事件感兴趣的接受者啦。

`PhoneBase实现Phone接口很容易理解，可以是为什么要继承自Handler类呢？`
答案就在PhoneBase的构造函数里：
{{{class="brush: java"

    protected PhoneBase(PhoneNotifier notifier, Context context, CommandsInterface ci,
            boolean unitTestMode) {
        this.mNotifier = notifier;
        this.mContext = context;
        mLooper = Looper.myLooper();
        mCM = ci;

        ......
        /*
        *答案在这里：PhoneBase通过mCM将自己注册为来电铃音事件的唯一接收者
        */
        mCM.setOnCallRing(this, EVENT_CALL_RING, null);

        // Initialize device storage and outgoing SMS usage monitors for SMSDispatchers.
        mSmsStorageMonitor = new SmsStorageMonitor(this);
        mSmsUsageMonitor = new SmsUsageMonitor(context.getContentResolver());
    }
    //对应的handleMessage 
    @Override
    public void handleMessage(Message msg) {
        AsyncResult ar;

        switch(msg.what) {
            case EVENT_CALL_RING:
                //处理来电铃音事件
                ar = (AsyncResult)msg.obj;
                if (ar.exception == null) {
                    Phone.State state = getState();
                    //部分RIL不会多次发送来电事件，此时强制发送该事件，简化处理情况
                    if ((!mDoesRilSendMultipleCallRing)
                            && ((state == Phone.State.RINGING) || (state == Phone.State.IDLE))) {
                        mCallRingContinueToken += 1;
                        sendIncomingCallRingNotification(mCallRingContinueToken);
                    } else {
                        notifyIncomingRing(); //PhoneBase在这里通知其他侦听者有来电铃音
                    }
                }
                break;
            
            //再次发送来电铃音时间
            case EVENT_CALL_RING_CONTINUE:
                Log.d(LOG_TAG, "Event EVENT_CALL_RING_CONTINUE Received stat=" + getState());
                if (getState() == Phone.State.RINGING) {
                    sendIncomingCallRingNotification(msg.arg1);
                }
                break;

            default:
                throw new RuntimeException("unexpected event not handled");
        }
    }
    ......

    //通知其他对来电铃音感兴趣的接收者
    private void notifyIncomingRing() {
        if (!mIsVoiceCapable)
            return;
        AsyncResult ar = new AsyncResult(null, this, null);
        //使用RegistrantList列表通知注册的接受者
        mIncomingRingRegistrants.notifyRegistrants(ar);
    }
}}}

在这里，我们接触到了telephony framework中最重要的对象`mCM`，这是一个CommondsInterface接口对象，对他的分析会在下面说明，现在之需要知道PhonbBase通过该对象发送命令给BP并接收BP发送回来的信息。

PhoneBase中定义了几个重要的成员变量
{{{class="brush: java"
    public CommandsInterface mCM;   //RIL对象，负责与rild交互
    protected IccFileHandler mIccFileHandler;   //负责对卡中的文件进行处理
    public DataConnectionTracker mDataConnectionTracker; //负责数据连接管理
    public IccRecords mIccRecords; //负责对卡中的记录处理
    public IccCard mIccCard;    //负责对卡的状态管理
    public SMSDispatcher mSMS;  //负责短信收发功能
}}}
这几个类是Phone各个功能模块的具体实现类，和 下面我们看PhoneBase声明的抽象方法：
{{{class="brush: java"
    ......
    //获取手机的状态
    public abstract Phone.State getState();
    //获取SIM/UIM卡中文件handler 
    public abstract IccFileHandler getIccFileHandler();
    //获取Phone名称的字符串表示
    public abstract String getPhoneName();
    //获取Phone的类型
    public abstract int getPhoneType();
    ......
}}}
这些都是与具体的手机模式和卡相关的属性方法，所以由具体的子类来实现：GSMPhone或CDMAPhone等
- GSMPhone实现类：framework/base/telephony/com/android/internal/telephony/gsm/GSMPhone.java
- CDMAPhone实现类：framework/base/telephony/com/android/internal/telephony/cdma/CDMAPhone.java

下面以GSMPhone为例来分析
== `GSMPhone.java` ==
[[http://www.oschina.net/code/explore/android-4.0.1/telephony/java/com/android/internal/telephony/gsm/GSMPhone.java|android源码]]
GSMPhone继承自PhoneBase抽象类，是GSM网络模式Phone的具体实现，上面提到的重要成员变量和抽象方法都在这个类中实现，由于涉及的内容太多，详细内容放在[[android_telephony_gsmphone|GSMPhone详细分析]]中。

上面介绍了与Phone相关的主要类，他们在实际应用中又是如何被App创建和使用的？这就用到了下面介绍的类：PhoneFactory。

== PhoneFactory.java ==
PhoneFactory是一个工厂类，上层应用使用该类的静态方法makeDefaultPhones()根据系统设定的网络模式来实例化对应的Phone对象

{{{class="brush: java"
    public static void makeDefaultPhones(Context context) {
        makeDefaultPhone(context);
    }

    public static void makeDefaultPhone(Context context) {
        synchronized(Phone.class) {
            //如果sMadeDefaults等于true，表示已经创建过defaultPhone
            if (!sMadeDefaults) {
                sLooper = Looper.myLooper();
                sContext = context;

                if (sLooper == null) {
                    throw new RuntimeException(
                            "PhoneFactory.makeDefaultPhone must be called from Looper thread");
                }
                ......

                //创建PhoneNotifier()对象，该对象的作用后面会介绍
                sPhoneNotifier = new DefaultPhoneNotifier();

                //获取优选网络模式
                int preferredNetworkMode = RILConstants.PREFERRED_NETWORK_MODE;
                if (BaseCommands.getLteOnCdmaModeStatic() == Phone.LTE_ON_CDMA_TRUE) {
                    preferredNetworkMode = Phone.NT_MODE_GLOBAL;
                }
                int networkMode = Settings.Secure.getInt(context.getContentResolver(),
                        Settings.Secure.PREFERRED_NETWORK_MODE, preferredNetworkMode);
                Log.i(LOG_TAG, "Network Mode set to " + Integer.toString(networkMode));

                int cdmaSubscription;
                int lteOnCdma = BaseCommands.getLteOnCdmaModeStatic();
                switch (lteOnCdma) {
                    case Phone.LTE_ON_CDMA_FALSE:
                        cdmaSubscription = RILConstants.SUBSCRIPTION_FROM_NV;
                        Log.i(LOG_TAG, "lteOnCdma is 0 use SUBSCRIPTION_FROM_NV");
                        break;
                    case Phone.LTE_ON_CDMA_TRUE:
                        cdmaSubscription = RILConstants.SUBSCRIPTION_FROM_RUIM;
                        Log.i(LOG_TAG, "lteOnCdma is 1 use SUBSCRIPTION_FROM_RUIM");
                        break;
                    case Phone.LTE_ON_CDMA_UNKNOWN:
                    default:
                        //Get cdmaSubscription mode from Settings.System
                        cdmaSubscription = Settings.Secure.getInt(context.getContentResolver(),
                                Settings.Secure.PREFERRED_CDMA_SUBSCRIPTION,
                                preferredCdmaSubscription);
                        Log.i(LOG_TAG, "lteOnCdma not set, using PREFERRED_CDMA_SUBSCRIPTION");
                        break;
                }
                Log.i(LOG_TAG, "Cdma Subscription set to " + cdmaSubscription);

                //根据系统设在，创建CommandInterface接口对象RIL，关于这个对象，后面会详细介绍
                sCommandsInterface = new RIL(context, networkMode, cdmaSubscription);

                //根据不同的网络模式，创建不同的Phone
                int phoneType = getPhoneType(networkMode);
                if (phoneType == Phone.PHONE_TYPE_GSM) {
                    Log.i(LOG_TAG, "Creating GSMPhone");
                    //使用代理模式
                    sProxyPhone = new PhoneProxy(new GSMPhone(context,
                                sCommandsInterface, sPhoneNotifier));
                } else if (phoneType == Phone.PHONE_TYPE_CDMA) {
                    switch (BaseCommands.getLteOnCdmaModeStatic()) {
                        case Phone.LTE_ON_CDMA_TRUE:
                            Log.i(LOG_TAG, "Creating CDMALTEPhone");
                            sProxyPhone = new PhoneProxy(new CDMALTEPhone(context,
                                        sCommandsInterface, sPhoneNotifier));
                            break;
                        case Phone.LTE_ON_CDMA_FALSE:
                        default:
                            Log.i(LOG_TAG, "Creating CDMAPhone");
                            sProxyPhone = new PhoneProxy(new CDMAPhone(context,
                                        sCommandsInterface, sPhoneNotifier));
                            break;
                    }
                }
                //设置标示位，表示创建成功
                sMadeDefaults = true;
            }
        }
    }
    
    public static int getPhoneType(int networkMode) {
        switch(networkMode) {
        case RILConstants.NETWORK_MODE_CDMA:
        case RILConstants.NETWORK_MODE_CDMA_NO_EVDO:
        case RILConstants.NETWORK_MODE_EVDO_NO_CDMA:
            return Phone.PHONE_TYPE_CDMA;

        case RILConstants.NETWORK_MODE_WCDMA_PREF:
        case RILConstants.NETWORK_MODE_GSM_ONLY:
        case RILConstants.NETWORK_MODE_WCDMA_ONLY:
        case RILConstants.NETWORK_MODE_GSM_UMTS:
            return Phone.PHONE_TYPE_GSM;

        // Use CDMA Phone for the global mode including CDMA
        case RILConstants.NETWORK_MODE_GLOBAL:
        case RILConstants.NETWORK_MODE_LTE_CDMA_EVDO:
        case RILConstants.NETWORK_MODE_LTE_CMDA_EVDO_GSM_WCDMA:
            return Phone.PHONE_TYPE_CDMA;

        case RILConstants.NETWORK_MODE_LTE_ONLY:
            if (BaseCommands.getLteOnCdmaModeStatic() == Phone.LTE_ON_CDMA_TRUE) {
                return Phone.PHONE_TYPE_CDMA;
            } else {
                return Phone.PHONE_TYPE_GSM;
            }
        default:
            return Phone.PHONE_TYPE_GSM;
        }
    }
   //获取默认的Phone对象
    public static Phone getDefaultPhone() {
        if (sLooper != Looper.myLooper()) {
            throw new RuntimeException(
                "PhoneFactory.getDefaultPhone must be called from Looper thread");
        }

        if (!sMadeDefaults) {
            throw new IllegalStateException("Default phones haven't been made yet!");
        }
       return sProxyPhone;
    }
}}}

PhoneFactory工厂类很简单，只是提供了创建默认Phone对象和获取不同Phone对象的静态方法，在根据网络模式创建默认Phone对象的时候，又用到了`PhoneProxy`类。

== PhoneProxy.java ==

PhoneProxy类是一个代理类，用于屏蔽Phone对象的实现细节，使上层应用使用时，不必关系实际的网络模式。

{{{class="brush: java"
  public class PhoneProxy extends Handler implements Phone {
    ......
    private IccSmsInterfaceManagerProxy mIccSmsInterfaceManagerProxy;   //IccSmsInterfaceManager接口的代理
    private IccPhoneBookInterfaceManagerProxy mIccPhoneBookInterfaceManagerProxy;   //IccPhoneBookInterfaceManager接口代理
    private PhoneSubInfoProxy mPhoneSubInfoProxy;   //PhoneSubInfo代理
    ......
    
      public PhoneProxy(Phone phone) {
          ......
          //根据不同模式的Phone创建代理成员对象 
          mIccSmsInterfaceManagerProxy = new IccSmsInterfaceManagerProxy(
                  phone.getIccSmsInterfaceManager());
          mIccPhoneBookInterfaceManagerProxy = new IccPhoneBookInterfaceManagerProxy(
                  phone.getIccPhoneBookInterfaceManager());
          mPhoneSubInfoProxy = new PhoneSubInfoProxy(phone.getPhoneSubInfo());
          //注册EVENT_RADIO_TECHNOLOGY_CHANGED事件监听
          mCommandsInterface = ((PhoneBase)mActivePhone).mCM;
          mCommandsInterface.registerForRadioTechnologyChanged(
                  this, EVENT_RADIO_TECHNOLOGY_CHANGED, null);
      }
  }
}}}
PhoneProxy在构造时，使用了具体Phone对象的成员变量构造自己的代理成员变量，如IccSmsInterfaceManager, IccPhoneBookInterfaceManager等，并注册了EVT_RADIO_TECHNOLOGY_CHANGED事件侦听handler，当无线技术改变时，依据新的radio技术对代理类做出调整。
{{{class="brush: java"
    public void handleMessage(Message msg) {
        switch(msg.what) {
        case EVENT_RADIO_TECHNOLOGY_CHANGED:
            //switch Phone from CDMA to GSM or vice versa
            mOutgoingPhone = mActivePhone.getPhoneName();
            ......
            //设置PhoneProxy实际被代理的Phone对象
            if(mOutgoingPhone.equals("GSM")) {
                logd("Make a new CDMAPhone and destroy the old GSMPhone.");

                ((GSMPhone)mActivePhone).dispose();
                Phone oldPhone = mActivePhone;

                mActivePhone = PhoneFactory.getCdmaPhone();
                ((GSMPhone)oldPhone).removeReferences();
                oldPhone = null;
            } else {
                ((CDMAPhone)mActivePhone).dispose();
                Phone oldPhone = mActivePhone;

                mActivePhone = PhoneFactory.getGsmPhone();
                ((CDMAPhone)oldPhone).removeReferences();
                oldPhone = null;
            }

            ......

            //Set the new interfaces in the proxy's
            //设置PhoneProxy代理成员变量
            mIccSmsInterfaceManagerProxy.setmIccSmsInterfaceManager(
                    mActivePhone.getIccSmsInterfaceManager());
            mIccPhoneBookInterfaceManagerProxy.setmIccPhoneBookInterfaceManager(
                    mActivePhone.getIccPhoneBookInterfaceManager());
            mPhoneSubInfoProxy.setmPhoneSubInfo(this.mActivePhone.getPhoneSubInfo());
            mCommandsInterface = ((PhoneBase)mActivePhone).mCM;

            //当radio technology change发生时，想PhoneApp发送广播
            Intent intent = new Intent(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED);
            intent.addFlags(Intent.FLAG_RECEIVER_REPLACE_PENDING);
            intent.putExtra(Phone.PHONE_NAME_KEY, mActivePhone.getPhoneName());
            ActivityManagerNative.broadcastStickyIntent(intent, null);
            break;
        default:
            Log.e(LOG_TAG,"Error! This handler was not registered for this message type. Message: "
                    + msg.what);
        break;
        }
        super.handleMessage(msg);
    }
}}}

既然是具体Phone的代理类，Phone的接口实现也仅是调用被代理Phone对象的方法,比如：
{{{class="brush: java"
    ......

    //获取service状态
    public ServiceState getServiceState() {
        return mActivePhone.getServiceState();
    }
    //获取celllocation
    public CellLocation getCellLocation() {
        return mActivePhone.getCellLocation();
    }
    ......
    //注册通话状态监听
    public void registerForPreciseCallStateChanged(Handler h, int what, Object obj) {
        mActivePhone.registerForPreciseCallStateChanged(h, what, obj);
    }
    //取消注册
    public void unregisterForPreciseCallStateChanged(Handler h) {
        mActivePhone.unregisterForPreciseCallStateChanged(h);
    }
    ......
}}}

上面介绍了关于Phone的几个类及其他们之间的关系，下面以UML类图的形式来展示他们之间的关系

= 公开包 =
可以被第三方telephony应用使用，用于获取手机和网络信息，如童话状态，漫游状态，运营商名称等。
