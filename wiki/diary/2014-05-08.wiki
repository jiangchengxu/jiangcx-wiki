%template code_3
%toc

= UNIX 环境高级编程 =

== 第11章 线程 ==

=== 线程标示 ===
{{{class="brush:c"
    #include <pthread.h>
    pthread_t pthread_self(void)
    int pthread_equal(pthread_t tid1, pthread_t tid2)
}}}

=== 线程生命周期函数 ===

1 线程创建:

{{{class="brush:c"
    #include <pthread.h>
    int pthread_create(pthread_t *tidp
                       const pthread_attr_t *restrict attr,
                       void *(*start_rtn)(void *), void *restrict arg);
}}}

2 线程终止:

在线程中调用进程的终止函数(如:exit(), _Exit(), _exit())或者将默认处理动作是终止进程的信号发送到线程,
都会导致整个`进程`终止

在不终止整个进程的情况下退出线程的方式有三种:
 # 线程从线程函数中返回,此时线程的`退出码`就是线程的`返回值`
 # 线程被同一进程中的其他线程取消,此时线程的`退出码`是`PTHREAD_CANCELED`
 # 线程调用pthread_exit(void *ret_ptr),线程的`退出码`是`ret_ptr`

其他线程可以调用pthread_join()等待某一线程的结束
{{{class="brush:c"
    int pthread_join(pthread_t tid, void **rval_ptr)
}}}
调用线程一直阻塞，直到指定的线程终止,对应线程的`退出方式`,参数rval_ptr此时就是对应的`退出码`。

其他线程可以调用pthread_cancel(pthread_t tid)`请求`取消同一进程中的其他线程,注意pthread_cancel并不等待
线程的终止,他`仅仅`是提出请求,被请求的线程可以选择`忽略`取消方式或者`控制`取消方式
{{{class="brush:c"
    int pthread_cancel(pthread_t tid)
}}}

在线程终止时,可以调用`线程清理处理函数`
{{{class="brush:c"
    void pthread_cleanup_push(void (*rtn)(void *), void *arg)
    void pthread_cleanup_pop(int excute)
}}}
当线程执行以下动作时调用清理程序
 # 线程调用pthread_exit()主动退出
 # 其他线程调用pthread_cancel()取消某一线程
 # 用`非零`excute参数调用pthread_cleanup_pop()

=== 线程同步机制 ===
为解决多个线程同一时间读写同一变量产生的竞争情况,必须使用线程的同步机制

==== 互斥量 ====
`互斥量`本质上是一把`锁`,在访问共享资源前对互斥量加锁,访问结束后释放互斥量上的锁.
对互斥量进行加锁后,任何其他试图再次对互斥量加锁的线程都将会被阻塞,直到当前线程释放该互斥锁.
如果释放互斥锁时有多个线程阻塞,所有在该互斥锁上的阻塞线程都会变成可运行状态,第一个变成可运行状态
的线程可以对互斥量加锁,其他线程将会看到互斥量依然被锁住,只能回去再次等待他变为可用.
通过这种方式,可以保证每次只有一个线程可以向前执行.

# 互斥量初始化:
 # 通过`PTHREAD_MUTEX_INITIALIZER`初始化`静态互斥量`
 # 初始化`动态互斥量`
    {{{class="brush:c"
        #include <pthread.h>
        int pthread_mutex_init(pthread_mutex_t *restrict mutex,
                                const pthread_mutexattr_t *restrict attr);
        int pthread_mutex_destroy(pthread_mutex_t *restrict mutex);
    }}}
# 对互斥量加锁
{{{class="brush:c"
    #include <ptrhead.h>
    int pthread_mutex_lock(pthread_mutex_t *restrict mutex);
    int pthread_mutex_trylock(pthread_mutex_t *restrict mutex);
    int pthread_mutex_unlock(pthread_mutex_t *restrict mutex);
}}}
pthread_mutex_lock()对互斥量上锁,如果互斥量已经上锁,调用线程将阻塞直到互斥量被解锁.
pthread_mutex_trylock()用于`尝试`对互斥量上锁,如果此时互斥量处于未锁住状态,那么pthread_mutex_trylock()
将锁住互斥量,返回0,否则函数调用失败,不能锁住互斥量,返回EBUSY,不会出现阻塞.

==== 读写锁(共享独占锁) ====
读写锁的三种状态:
# `读模式`下加锁状态
# `写模式`下加锁状态
# `不加锁`状态
一次只有一个线程可以占有`写模式`的读写锁,但是多个线程可以同时占有`读模式`的读写锁
当读写锁以读模式锁住时,他是以`共享模式`锁住的;当他以`写模式`锁住时,他是以`独占模式`锁住的.
 
# 读写锁创建及销毁
{{{class="brush:c"
    #include <pthread.h>
    int pthread_rwlock_init(pthread_rwlock_t *restrict rwlock,
                            const pthread_rwlockattr_t *restrict attr);
    int pthread_rwlock_destroy(pthread_rwlock_t *restrict rwlock);
}}}
# 读写锁上锁及解锁
{{{class="brush:c"
    #include <pthread.h>
    int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
    int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
    int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
}}}

{{{class="brush:c"
    int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
    int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
}}}

==== 条件变量 ====
互斥量通过控制对数据的访问实现了同步,而条件变量允许根据实际的数据值来实现同步
没有条件变量,程序员必须使用线程去轮询,查看条件是否满足,这样比较消耗资源.
条件变量往往与互斥量在一起使用.

条件变量初始化:
# 静态初始化:使用PTHREAD_COND_INITIALIZER初始化静态条件变量
# 动态初始化:
{{{class="brush:c"
    #include <pthread.h>
    int pthread_cond_init(pthread_cond_t *restrict cond,
                          pthread_condattr_t *attr);
    int pthread_cond_destroy(pthread_cond_t *restrict cond);
}}}

将调用线程添加到等待条件列表
{{{class="brush:c"
    #include <pthread.h>
    int pthread_cond_wait(pthread_cond_t *cond,
                            pthread_mutex_t *mutex);
    int pthread_cond_timedwait(pthread_cond_t *cond,
                            pthread_mutex_t *mutex,
                            const struct timespec *restrict timeout);
}}}
pthread_cond_wait()阻塞调用线程,直到指定的条件变量收到信号.该函数应该在互斥量`锁定`时调用,当在等待时会`自动解锁`互斥量.
在信号被发送,线程被激活后,互斥量会`自动被锁定`,当线程结束时,由`程序员负责解锁互斥量`

向指定的条件变量发送信号
{{{class="brush:c"
    #include <pthread.h>
    int pthread_cond_signal(pthread_cond_t *cond);
    int pthread_cond_broadcast(pthread_cond_t *cond);
}}}
用于向其它等待在条件变量上的线程发送信号(激活其他线程),应该在互斥量被锁定后调用
在调用pthread_cond_wait()前调用pthread_cond_signal()会发生逻辑错误.

`使用这些函数时适当的锁定和解锁相关的互斥量是非常重要的:`
    # 调用pthread_cond_wait()前锁定互斥量失败可能导致线程不会阻塞
    # 调用pthread_cond_signal()后解锁互斥量失败可能会不允许相应的pthread_cond_wait()函数结束.
