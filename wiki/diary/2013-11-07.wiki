%template code_3
%toc

  = UNIX 环境高级编程 笔记 =

= 第3章 =

== 文件描述符 ==
linux使用文件描述符来引用打开的文件。内核为每个打开的文件创建一个`文件表`（重复打开同一个文件，会创建多个文件表），
该文件表包含了打开文件的状态标志，当前文件的偏移量等信息，该表由内核维护，多个进程也可以使用同一个`文件表`，
每个进程里面都包含一张文件描述符表(open-file-description)，里面是该进程打开的`文件表`的`指针`，而文件描述符实际就是各个文件表指针在整个表中的索引。
进程通过文件描述符找到对应的文件表，再根据文件表述表找到vnode节点，从而找到真实的文件。

=== 标准输入，标准输出，标准错误 ===
每个进程创建时，shell都会打开三个文件供进程使用，一个用于进程读取数据，称为标准输入， 一个用于进程输出数据，称为标准输出，另一个用于输出错误，称为标准错误。
按照惯例，进程使用文件描述符0,1,2分别 引用这三个打开的文件。默认情况下，系统打开的这三个文件都是控制终端，所以向0,1,2文件描述符读写数据也就是读写控制终端了。
当然，0,1,2也并不只能关联到控制终端，linux支持输入输出重定向，实质就是将0,1,2这三个文件描述符关联到别的文件，这样可以在不改变代码实现的前提下，更改操作的文件。
在POSIX标准中，将0,1,2替换成STDIN_FILENO, STDOUT_FILENO, STDERR_FILENO常量，这些常量定义在<unistd.h>

== open函数 ==
open系统调用用于打开一个文件。 函数返回进程`最小未用`的文件描述符，多次打开同一文件，会返回不同的文件描述符。
使用O_CREAT创建文件时，如果文件存在，并`不会`报错，而会直接打开指定的文件。如果使用了O_EXCL,则在文件存在时，会直接报错返回，这是一个原子操作。
新打开的文件的文件偏移量为0,即使是否设置了O_APPEND标识，对新打开的文件使用lseek(）调用，返回的当前文件偏移量都为0.
O_APPEND标示的作用是：只有当使用write操作时，才会先将文件的偏移量移动到文件的结尾，该标记`不会`对read操作产生影响.

Linux中，执行write操作并不会马上将数据写入，而是将写操作排入队列，实际的IO操作由update守护进程完成，open提供三个标识来改变这种写延迟
- `O_SYNC`:    write操作会等待IO操作完成后，才返回。
- `0_DSYNC`:    write操作会导致文件属性更新时，会等待IO操作完成才返回。
- `O_RSYNC`:   read操作会等待任何对文件的write操作完成后，才读取返回。 
使用同步标识会使数据同步执行IO操作，避免写延迟机制导致的意外数据丢失，但会极大的增大执行时间。

== close函数 ==
用于关闭一个<red>文件描述符</red>，使该文件描述符不再引用任何文件，成功返回0,失败返回-1.
如果该文件描述符是文件表项的最后一个引用，则释放文件表项。

== lseek函数 ==
用于更改当前文件偏移量，系统默认情况下，打开一个文件时，该偏移量设置为0,即使设置了O_APPEND参数，文件的初始偏移量也是0.
lseek的参数offset可以为负数，表示从whence开始向后偏移，当文件偏移量大于当前文件的长度时，后续的写操作会在文件中构成一个空洞。
lseek返回新的文件偏移量，一般为一个非负整数，特殊文件也会返回负值，出错时返回`-1`

== read函数 ==
read函数从打开的文件中的当前文件偏移量开始读取数据。返回读取到的字节数。当读到`文件结尾`时，返回0,出错返回`-1`.
<red>当从终端设备读取时，通常一次只能读取一行。`CTRL-D`用于标识输入结束.</red>

== write函数 ==
write函数用于向打开的文件写入数据，总是从当前文件偏移量开始写入数据。如果在打开文件时指定了O_APPEND,则在写入数据前，先将文件偏移量移动到文件结尾，再写入。
返回实际写入的字节数，一般与指定写入的长度相同，否则表示出错，出错时返回`-1`.

== 原子读写操作 ==
- ssize_t pread(int fd, void * buf, size_t nbytes, off_t offset)
- ssize_t pwrite(int fd, void * buf, size_t nbytes, off_t offset)
在文件描述符给定的位置读写文件，offset指从文件起始位置开始的偏移量，这两个操作都不会更改当前文件偏移量。 
当文件设置O_APPEND标识时，pwrite函数中的offset`不起作用`，buf始终会写到文件尾。
{{{class="brush: c"
/*
 * 测试pread pwrite操作是否受当前文件偏移量的影响
 */
#define FILENAME "pread_pwrite.test"
/*
 *pread_pwrite.test内容：
 * 1234567890
 */
void pwritetest();
void preadtest();

void main(int argc, char* argv[]){
    //preadtest();
    pwritetest();
}

void preadtest(){
    int fd;
    char buf[4] = {0};
    fd = open(FILENAME, O_RDONLY);
    if(fd < 0){
        printf("open file(%s) error(%s)\n", FILENAME, strerror(errno));
        return;
    }

    lseek(fd, 8, SEEK_SET);//移动当前文件偏移量到8
    pread(fd, buf, 2, 3);   //从3处读取2字节数据
    printf("read buf %s\n", buf);   //打印读取的数据，输出为：45
    printf("after pread offset(%d)\n", (int)lseek(fd, 0, SEEK_CUR));    //打印此时的文件偏移量，输出为：8
}

void pwritetest(){
    int fd;
    fd = open(FILENAME, O_WRONLY|O_APPEND);
    if(fd < 0){
        printf("open file(%s) error(%s)\n", FILENAME, strerror(errno));
        return;
    }
    pwrite(fd, "abcdefg", 7, 5);
    //在5处写入数据，函数执行后，文件中的数据为1234567890abcdefg
    printf("after pwrite offset(%d)\n", (int)lseek(fd, 0, SEEK_CUR)); //打印此时的文件偏印量，输出为：0
}
}}}

== dup和dup2函数 ==
dup和dup2函数用于复制文件描述符，返回的新文件描述符与原有的文件描述符指向相同的文件表项，因而也共享同一文件状态标志，文件偏移量。

== sync,fsync,fdatasync函数 ==
当将数据写入文件时，内核通常先将该数据`复制到其中的一个缓冲区`，如果该缓冲区尚未写满，则并不将其排入输出队列，而是`等待其写满`或者当内核需要重用该缓冲区以便存放其他磁盘块数据时
再将该缓冲区`排入输出队列`，然后待其`到达队首`时，才进行实际的IO操作,这种输入方式就是`延迟写`。
延迟写减少了磁盘的读写次数，但降低了文件内容更新速度，当系统故障时，可能造成文件更新内容丢失。为保证磁盘上实际文件内容与高速缓冲中的内容一致，UNIX提供sync,fsync和fdatasync函数。
- sync()：用于将数据缓冲区排入输出队列，并不等待实际IO操作完成就返回。update守护进程会周期性的调用sync函数，来定期冲洗内核的块缓冲区。
- fsync(int fd)： 等待指定的fd文件数据写入磁盘才返回。
- fdatasync(int fd）：

