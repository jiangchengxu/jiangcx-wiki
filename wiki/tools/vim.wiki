 {{../../public/images/Wiki-wordmark.png}} 

== Vim基本概念 ==
=== vim操作理念 ===
# Don't Repeat yourself, Use "." as more as possable.
# 更少的按键组合
# Compose Repeatable Changes.


=== 工作缓冲区 ===
使用vim打开一个文件,实际是将该文件的内容读到了vim工作缓冲区,vim所有的编辑,删除操作都是对该缓冲区进行处理,
使用":wq"命令可以保存缓冲区,缺省使用当前文件名,原有文件被覆盖,使用":write newfile"可以将缓冲区写到newfile文件中,
而原文件内容保持不变.
无论如何,如果设置"backup"选项,vim会在原来的文件被覆盖之前改名或复制.备份文件名通常是原来的文件名加上"backupext",缺省是"~"

一个`句子`以`.`,`!`或者`?`结尾并紧随着一个换行符,空格或者制表符.标点和空白字符之间可以出现任何数量的闭括号和引号:")","]",""",段落和小节的边界也视为句子的边界

一个`段落`从空行或某一个段落宏命令开始,小节边界也被视为段落边界.

一个`小节`从首列出现的换页符或者某一个小节宏命令开始

`Operator + Motion = Action`

----
== 基本移动 ==
`motion`: 移动光标的命令或动作,出现在操作符之后,从而使操作符作用于被该动作所跨越的文本之上.

- `w`   //移动到下一个单词的词首
- `b`   //移动到上一个单词的词首
- `e`   //移动到下一个单词的词尾
- `ge`  //移动到上一个单词的词尾
*一个词（w）是以非单词字符结尾(如".", ",", "-", ")"等)的字母数字和下划线组成的字符串*
*字串（W）以空白字符分隔*

== 重复操作 ==
- `.`       //重复上次改变n次,会递增所使用寄存器内的序号,详情查看":help redo-register"
- `@:`      //重复上次命令行n次
- `&`       //重复上次":s/"替换命令

== vim操作符 ==
- `c`	//修改 (change)
- `d`	//删除 (delete)
- `y`	//抽出 (yank) 到寄存器 (不改变文本)
- `~`	//变换大小写 (只有当 'tildeop' 置位时有效)
- `g~`	//变换大小写
- `gu`	//变为小写
- `gU`	//变为大写
- `!`	//通过外部程序过滤{motion}文本.
- `=`	//通过 'equalprg' (若为空，C-indenting) 过滤
- `gq`	//文本排版
- `g?`	//ROT13 编码
- `>`	//右移
- `<`	//左移
- `zf`	//定义折叠
- `g@`	//调用 'operatorfunc' 选项定义的函数
当一个操作符调用两次时,作用于该行,如"dd","cc","guu"

== 快捷键 ==
- `x`  //表示  dl  (删除当前光标)
- `X`  //表示  dh  (删除光标左边)
- `D`  //表示  d$  (从光标位置删除到行尾)
- `C`  //表示  c$  (从光标位置修改到行尾)
- `s`  //表示  cl  (修改一个字符)
- `S`  //表示  cc  (修改一整行)

== 替换模式 ==
`R` 键进入替换模式，此时可以通过<Insert>键在插入模式和替换模式之间切换

== 滚动屏幕 ==
*前提：Normal模式*
- `CTRL-F`  //向下滚动一屏
- `CTRL-B`  //向上滚动一屏
- `CTRL-D`  //向下滚动半屏
- `CTRL-U`  //向上滚动半屏
- `CTRL-E`  //向下滚动一行
- `CTRL-Y`  //向上滚动一行

== 移动字符 ==
- `N <space>`   //从当前位置移动N个字符

== 复制黏贴 ==
*前提：Normal模式*
* 使用系统粘贴板`必须安装gvim才能使用` *

- `"+yy`    //复制到系统粘贴板
- `"+p`     //从系统粘贴板粘贴
- `"*yy`    //复制到选择缓冲区
- `"*p`     //从选择缓冲区粘贴

* 复制到特定行：
- `ynG`: //从当前行复制到第n行,y表示开始复制，nG表示跳到第n行

* 命令模式下复制
- `:y+`         //复制当前行
- `:Ny+`        //复制第N行
 
<red>[tips]在插入模式下迅速插入某行数据</red>
# 插入模式下，CTRL-O 退出插入模式
# 使用:Ny+<ENTER> 复制第N行到寄存器＋
# 使用CTRL-R+ 将寄存器＋的内容复制到当前位置

== 在行首插入文本 ==
- `I`       //在行开头插入文本（不包括空白字符）
- `gI`      //在行开头插入文本（包括空白字符）

== Normal模式下自动增加减少数值 ==
- `CTRL-X`  //光标所在位置的数值-1
- `CTRL-A`  //光标所在位置的数值+1
*默认只支持10进制和16进制数字，可使用:set nrformats=octal,hex打开对8进制的支持*
如果当前光标不在数字上,vim会在本行找到下一个数字后,再执行相应的动作.

== 查找 ==
- `*`,`#`   //向前/向后查找光标下的单词（全匹配查找）
- `g*`, `g#`    //向前/向后查找光标下所在的单词(部分匹配)

== 跳转 ==
- `[{`      //跳回当前代码块起始的{
- `gd`      //从变量的调用跳转到它的局部声明
- `gD`      //从变量的调用跳转到它的全局声明
- `[m`      //向后查找方法的开始 
- `[M`      //向后查找方法的结束
- `]m`      //向前查找方法的开始
- `]M`      //向前查找方法的结束 
- `[I`      //列出所有出现光标下的单词的位置

== 快速选择文本 ==
- `viw`         //快速选中光标所在位置的整个单词
- `yiw`         //快速复制光标所在位置的整个单词

== 查找字符 ==
- `fx`,`Fx`
  //前向/后向在`本行`查找字符`x`，光标停止在找到的字符位置`上`
- `tx`,`Tx`
  //k前向/后向在`本行`查找字符`x`，光标停止在找到的字符位置`前`
- `;`,`,`              //前向/反向重复查找动作

== 标记 ==
* 标记名小写时为局部标记，大写时为全局标记
* `跳转到标记位置，'跳转到标记所在位置行首

=== 设置标记 ===
- `ma`                    //创建标记a

=== 跳转标记 ===
- `\`a`                   //跳转到标记a的位置
- `'a`                    //跳转到标记a所在的行首

=== 删除标记 ===
- `d'a`                   //删除标记a - 

=== 特殊跳转标记 ===
- `' 或 \``             //跳转前的位置
- `"`                   //上次离开该缓冲区时光标的位置
- `[`                   //上次修改,复制或粘贴的文本的第一个字符
- `]`                   //上次修改,复制或粘贴的文本的最后一个字符
- `<`                   //上次选择文本的开始位置
- `>`                   //上次可视模式选择文本的结束位置
- `^`                   //最后一次插入模式结束时光标所在位置
- `.`                   //上次改变时光标所在位置
- `(`                   //当前句子的开始处
- `)`                   //当前句子的结尾处
- `{`                   //当前段落的开始处
- `}`                   //当前段落的结尾处

=== 改变表 ===
在改变文本之后,光标的位置会被记住.每个改变都会记住一个位置,从而可以使该操作可以被撤销.
- `g;`                  //转到改变表里的第count个较旧的位置
- `g,`                  //跳转到改变表里第count个较新的位置
- `:changes`            //查看跳转表

== 打印字符数值 ==
- `:ascii`, `ga`
  //打印光标位置的字符ascii值，中文字符打印unicode值

== 排序 ==
- `!sort`                      //排序

== tab页 == `gf, CTRL+W gf`
当编辑的文件中包含另一个文件的名称时，将光标移动到这个名称上，然后输入gf,会在当前页面打开该文件，如果想再新的tab页中编辑这个文件，使用CTRL+W
gf
`CTRL-W gF`在tab中打开光标所在的文件,并跳转到文件名后面的行号上

== 正则表达式 ==
- `*`                   //匹配前一个字符0次或多次
- `\+`                  //匹配前一个字符1次或多次
- `\=`                  //匹配前一个字符0次或1次
- `\a`                  //匹配任意字母
- `\d`                  //匹配任意数字
- `[]`                  //匹配[]中的一个字符
- `[^]`                 //匹配非[]中的所有字符
- `\{min,max}`          //匹配前一个字符min次到max次

== 插入状态下操作 ==
*前提：插入模式*
- `CTRL-W`              //插入模式下，删除光标前一个单词
- `CTRL-A`              //插入最近插入的文本，保持插入模式
- `CTRL-@`              //插入最近插入的文本，退出插入模式
- `CTRL-Y`              //插入光标上方的字符
- `CTRL-E`              //插入光标下方的字符
- `CTRL-R {0-9a-z"%#*:="}`            //在光标处插入寄存器的内容
- `CTRL-O cmd`          //普通模式下执行cmd命令后，重新进入插入模式
- `0 CTRL-D`            //删除当前行的所有缩进
- `^ CTRL-D`            //删除当前行的所有缩进,在下一行恢复删除的缩进
- `CTRL-D`              //取消行首的tab缩进
- `CTRL-T`              //增加行首的tab缩进
- `CTRL-H`              //删除前一个字符(如backsapce)
- `CTRL-U`              //删除到行首
- `CTRL-[`              //返回到普通模式
- 

* CTRL-X 子模式
- `CTRL-X CTRL-]`        //补全标签
- `CTRL-X CTRL-D`        //补全定义过的标识符
- `CTRL-X CTRL-F`        //补全文件名
- `CTRL-X CTRL-I`        //补全标识符
- `CTRL-X CTRL-K`        //从字典补全标识符
- `CTRL-X CTRL-T`        //从同义词词典补全标识 
- `CTRL-X CTRL-L`        //补全完整的行
- `CTRL-X CTRL-N`        //下一个补全
- `CTRL-X CTRL-O`        //全能 (omni) 补全
- `CTRL-X CTRL-P`        //上一个补全
- `CTRL-X CTRL-S`        //拼写建议
- `CTRL-X s`             //拼写建议
- `CTRL-X CTRL-U`        //用 'completefunc' 补 
- `CTRL-X CTRL-V`        //如同 : 命令行那样补全

== 窗口操作 ==
- `CTRL-W W`             //跳转到前面第N个窗口
- `CTRL-W w`             //跳转到后面第N个窗口
- `CTRL-W t`             //跳转到顶部的窗口(top)
- `CTRL-W b`             //跳转到底部的窗口(bottom)
- `CTRL-W p`             //跳转到前一个窗口(previous)
- `CTRL-W P`             //跳转到预览窗口
- `CTRL-W x`             //交换当前窗口和第N个窗口(缺省下一个窗口)
- `CTRL-W o`             //只保留光标所在窗口，关闭其他窗口
- `CTRL-W i`             //分割窗口并跳转到光标所在的标识符的声明上
- `CTRL-W d`             //分割窗口并跳转到光标所在的标识符的定义上
- `CTRL-W f`             //分割窗口并跳转到光标所在的文件名上
- `CTRL-W ]`             //分割窗口并跳转到光标所在的标签上
- `CTRL-W }`             //在预览窗口显示光标所在tag
- `CTRL-W z`             //关闭预览窗口
- `CTRL-W s`             //分割当前窗口为两部分，新的窗口 N 行高
- `CTRL-W v`             //垂直分割当前窗口，新的窗口 N 列宽
- `CTRL-W c`             //关闭当前窗口
- `CTRL-W n`             //打开一个新的窗口
- `CTRL-W ^`             //打开一个新的窗口编辑交换文件
- `CTRL-W q`             //退出当前窗口

- `CTRL-W H`             //把当前窗口放到最左端,并且是最大高度
- `CTRL-W J`             //把当前窗口放到最底端,并且是最大宽度
- `CTRL-W K`             //把当前窗口放到最顶端,并且是最大宽度
- `CTRL-W L`             //把当前窗口放到最右端,并且是最大高度
- `CTRL-W T`             //把当前窗口移动到一个新的标签页.

== 会话 ==
- `:makesession file`       //创建一个file会话
- `:source file`            //恢复file会话
- `vim -c ":source file"`   //使用vim打开一个会话

== 可视模式 ==
- `gv`                      //重新选择上一次可视模式区域 - 

== 命令行使用当前文件的名称 ==
*前提：命令行模式*
- `％`      //当前文件的名称
- `％:p`    //当前文件的全路径名称
- `％:e`    //当前文件的后缀

== 默认寄存器用处 ==
普通的寄存器包括:`a-zA-Z"`,特殊的寄存器包括`0-9,%,#`等其他字符.
- `%`           //当前文件名
- `#`           //交替文件名称
- `*`           //剪贴板的内容
- `+`           //剪贴板的内容
- `:`           //最近一次在命令行输入的命令
- `/`           //最后查询模式
- `"`           //最后使用的寄存器
- `.`           //最近插入的文本
- `=`           //表达式寄存器
*"%p 粘贴当前文件名*
- `0`           //最近一次复制的内容
- `1`           //最近一次删除的内容
- `2-9`         //最近N次删除的内容

大写和小写字母指的是同一个寄存器,但是狎小写字母会覆盖原先寄存器中的内容,而使用大写字母会将新的内容追加到原来的内容之后.
*"aY    复制一行到寄存器a*
*"AY    附加一行到寄存器a*

== 宏操作 ==
- `@@`          //重复使用上一次使用的宏 - 
- 
== 查阅man信息 ==
*使用:runtime! ftplugin/man.vim加载man文件类型插件*
- `:Man 3 echo`        //查找手册第三章的echo
- `\K`                  //在新窗口中显示光标下的单词的手册
- 
== 命令行窗口 ==
- `q:`           //打开命令行窗口，可以在上面修改命令行命令，按Enter执行该命令

== 快速返回上次vim编辑的位置 ==
打开vim后，使用 `0 命令可以返回当初离开vim的位置

== 编辑二进制文件 ==
# vim -b datafile //使用-b选项打开datafile文件
# :%!xxd          //用xxd把文件转化成16进制文本文件
# :%!xxd -r       //将文件转换回来，之后16进制部分的修改才会采用。

== 插入二合字母 ==
- `CTRL-K Co`       //插入©特殊字符
- `:digraph`        //查看所有的特殊字符
- 

== 快速排版 ==
- `gq`              //排版操作符
- `gq}`             //从当前光标处至当前段段尾所包括的文本进行排版操作。
- `gqap`            //这将对一个段落 (用空行隔开) 的文本进行排版操作。也包括在光标之前的部分。

== 更改大小写 ==
- `gu<motion>`        //将motion范围内的字符改为小写
- `gU<motion>`        //将motion范围内的字符改为大写
- `g~<motion>`        //将motion范围内的字符切换大小写
- `guu`               //使当前行变成小写
- `gUU`               //使当前行变成大写
- `g~~`               //使当前行改变大小写
gu,gU,g~是操作符，可以用于motion命令，文本对象和可视模式
*要让一个操作符作用于当前行，可以执行这个操作符两次，如dd,cc,yy,guu(是gugu的缩写）,g~~(是g~g~的缩写)*

== 使用外部程序 ==
- `:read !program`      //读入一个命令的输出,"!"让vim知道后面是一个命令
- `:write !program`     //把文本输出到一个命令,"!"让vim知道后面是一个命令
- `![range]{program}`   //使用一个外部程序对一个文本块进行过滤
{range}            指定操作的文本范围
{program}           指定要执行的外部程序
如：!5Gsort         //从当前行到第5行的文本执行sort程序
*!!用于对当前行执行program命令*
- `:!{program}`     //执行一个命令
注意："!{program}"前面的作用区，如果不附带作用区，这个程序就跟通常一样被执行，
而加了这个作用区，作用区内的文本行就经由该程序过滤而出。

== 反向引用 ==
\0

== 命令行窗口 ==
- `q:`      //打开命令行窗口
- 

== 返回编辑过的文件 ==
- `browse oldfiles`     //打开曾经编辑过的文件列表

== 缩进 ==
- `:set autoindent` 选项用于自动插入缩进，当开始一个新行时，新行会采用和上一行相同的缩进。
- `>` 操作符用于增加一行中的缩进量，`shiftwidth`用来设定增加的默认缩进量，默认值是8.
- `softtabstop` 使<Tab>键看起来像是被设定`softtabstop`所指定的值，但实际上使用的确是制表符和空格的组合
- `tabstop` 设置<Tab>代表的空格数，默认为8
- `expandtab` 选项设置使用空格代替<Tab>键，要插入实际的<Tab>时，可用CTRL-V<Tab>。

== 行内移动 ==
- `g0`		移动到当前行的第一个可见字符
- `g^`		移动到当前行的第一个非空白的可见字符
- `gm`		移动到当前行的中点
- `g$`		移动到当前行的最后一个可见字符

== 大小写匹配 ==
- `:set ignorecase smartcase`   如果采用的模式里至少有一个大写字母，查找就成了大小写敏感的。
单个模式里的大小写
如果只想忽略一个特定模式里的大小写，在模式前面添加`\c`字符串就可以了。
添加`\C`将使该模式的匹配大小写。

==RegEx预定义范围==
有些字符范围使用得很频繁。Vim 为这些字符范围提供了一些快捷方式。例如: >

/\a

这个命令找寻字母字符。这相当于使用 "/[a-zA-Z]"。下面还有几个这样的字符范围:

项	匹配			相当于 ~
\d	数位			[0-9]
\D	非数位			[^0-9]
\x	十六进制数位		[0-9a-fA-F]
\X	非十六进制数位		[^0-9a-fA-F]
\s	空白字符		[ 	]     (<Tab> 和 <Space>)
\S	非空白字符		[^ 	]     (非 <Tab> 和 <Space>)
\l	小写字母		[a-z]
\L	非小写字母		[^a-z]
\u	大写字母		[A-Z]
\U	非大写字母		[^A-Z]
\h  字母和下划线      [A-Za-z_]
\w  单词字符        [0-9A-Za-z_]

备注:使用这些预定义的字符范围要比使用它们所表示的那个字符范围快很多。
这些项不能用于 [] 方括号内。因此 "[\d\l]" 不能用来匹配一个数字或一个小
写字母。请换用 "\(\d\|\l\)"。

== 折叠 ==
- `zf`      创建折叠
- `zo`      打开折叠
- `zc`      关闭折叠
- `zr`      减少折叠
- `zm`      折叠更多
- `zR`      全部打开多层折叠
- `zM`      全部展开多层折叠
- `zn`      快速禁止折叠功能
- `zN`      回复原来的折叠
- `zi`      切换折叠状态
- `zO`      打开所有的折叠
- `zC`      关闭所有的折叠
- `zd`      删除一个光标行上的折叠
- `zD`      删除所有光标上的折叠
 
以下步骤是一种实用的操作方法:
- 创建折叠，以获取你的文件的概览
- 移动到你要操作的地方
- 执行 |zi| 以便一边看着文本，一边编辑
- 再执行 |zi|  以便移动到另一处

=== 查看文件折叠的位置 ===
:set foldcolumn=4   这个命令将在窗口左边显示一小栏来标识各个折叠。
=== 存储和恢复折叠 ===
:mkview     存储折叠
:loadview   重新加载折叠

== 在代码间移动 ==
使用`[`和`]`符号在代码间快速移动`[`表示向前移动，`]`表示向后移动
- `[# ]#`  在#ifdef - #endif 之间快速移动
- `[[ ][`  在段落之间快速跳转 
- `[{ ]}`  在{}之间快速跳转
- `[( ])`  在()之间快速跳转
- `[m [M`  找到下一个方法的开头和结尾      
- `[I`     在当前文件和所有包含的文件中搜索声明
- `[/ ]/`  在注释之间跳转

== 编译程序 ==
:make {argument}    运行make程序并捕捉其运行结果
:cnext              将光标移动到下一个错误所在行
:cc                 查看当前错误的详细信息
:clist{!}           得到一个有关所有出错信息的概览
:cprevious          回到上一个错误
:cfirst             到第一处错误
:clast              到最后一处错误
:cc 3               到第三处错误
:colder             查看上一个出错信息列表
:cnewer             查看下一个出错信息列表

== 切换到Ex模式 ==
- `gQ`    切换到Ex模式,同一条接一条的":"命令相同.

== 使用:vimgrep 或 :grep 浏览源代码 ==
:vimgrep 命令是vim的内置grep函数
:grep 命令使用的是外部grep命令

举例:如果要对read_file()函数添加一个参数,可以使用下面的命令:
    :vimgrep /\<read_file\>/ *.c
可以使用":cn"在一系列匹配中跳转,然后加上所需要的参数.在某个地方,你需要从上一级函数msg()得到这个新的参数,因此也要对他作出修改:
    :vimgrep /\<msg\>/ *.c
在修改msg()函数的同时,你又找到另一个需要从上级函数中获得该参数的函数.你可以用":vimgrep"命令找到这些函数.当完成一个函数后,可以用;
    :colder
来跳转到上一个函数.

就像浏览一棵树一样,":vimgrep"每深入一层,就创建新的分支.":colder"跳转到上一层.你可以混用":vimgrep"和":coloder",以树形方式来浏览所有的位置.
如果经常这么做,你就不需要写一个"todo list"就能找到所有的位置.

=== 命令行模式自动补全 ===
命令行下可以使用<TAB>键自动进行命令或文件名补全,连续<Tab>键进行连续补全,而<S-Tab>进行当前补全的切换.

== ubuntu下更改<Esc>和<Cap>键 ==
System- > Preferance- > Keyboard- > Layouts- > options- > CapsLock Key Behavior- > Swap ESC and CapsLock

== `:ls`与`:!ls`的区别 ==
`:ls`: 显示当前vim的buffer file list
`:!ls` 则是执行ls shell命令

== `:find` ==
命令用于在'path'中查找文件并打开,可以用`set path+=xxx`设定命令查找的目录.`**`表示递归查找子目录
使用`:set path?`查看当前"path"

== 跳转表 ==
`跳转表`用来记住跳转的位置.用`CTRL-O`和`CTRL-I`命令,跳回到较早的跳转位置,然后再跳回来.每个`窗口`你独立的跳转表.
`:jumps`用于查看跳转表

== 改变表 ==
在改变文本以后,光标的位置会被记住.每个改变会记住一个位置,从而可以使该操作能被撤销.
`g;`    跳转到改变表里第[count]个较旧的位置
`g,`    跳转到改变表里第[count]个较新的位置
`:changes`用于查看改变表
