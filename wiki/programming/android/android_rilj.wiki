%template code_3
%toc

= Android RIL实现－－RILJ篇 =

RILJ是Android RIL实现中的java实现，定义了一套可以同RILD通信的命令规范，通过这些命令，将Framework层的命令下发给RILD守护进程并将RILD上报的信息反馈给Telephony Framework层。

RILJ的类架构与Phone的类架构很相似，包括CommandsInterface接口，BaseCommands抽象类和RIL类。

== CommandsInterface.java ==
CommandsInterface是RILJ定义的接口规范，Telephony Framework通过该接口的实现与rild进程交互。
== BaseCommands.java ==
BaseCommands是一个抽象类，与PhoneBase类在Phone类架构中的功能相同，主要负责实现CommandsInterface接口中的事件注册、取消功能的实现，代码与PhoneBase相似。这里不再赘述。
== RIL.java ==
这是我们这篇介绍的重点。

RIL是CommandsInterface接口的具体实现，负责具体的rild交互实现。PhoneApp在使用PhoneFactory构建PPhone具体实例的时候就会根据使用的网络模式构建RIL对象。
`PhoneFactory.java`
{{{class="brush: java"
    public static void makeDefaultPhone(Context context) {
        synchronized(Phone.class) {
            ......
                //reads the system properties and makes commandsinterface
                sCommandsInterface = new RIL(context, networkMode, cdmaSubscription);

            int phoneType = getPhoneType(networkMode);
            if (phoneType == Phone.PHONE_TYPE_GSM) {
                Log.i(LOG_TAG, "Creating GSMPhone");
                sProxyPhone = new PhoneProxy(new GSMPhone(context,
                            sCommandsInterface, sPhoneNotifier));
            } else if (phoneType == Phone.PHONE_TYPE_CDMA) {
                switch (BaseCommands.getLteOnCdmaModeStatic()) {
                    case Phone.LTE_ON_CDMA_TRUE:
                        Log.i(LOG_TAG, "Creating CDMALTEPhone");
                        sProxyPhone = new PhoneProxy(new CDMALTEPhone(context,
                                    sCommandsInterface, sPhoneNotifier));
                        break;
                    case Phone.LTE_ON_CDMA_FALSE:
                    default:
                        Log.i(LOG_TAG, "Creating CDMAPhone");
                        sProxyPhone = new PhoneProxy(new CDMAPhone(context,
                                    sCommandsInterface, sPhoneNotifier));
                        break;
                }
            }

            sMadeDefaults = true;
        }
    }
}}}
下面我们来看具体的RIL.java实现

RIL.java文件中包含4个类，主类是RIL， 辅助类RILRequest， 内部类RILSender和RILReceiver，下面我们对这写类的作用和实现详细分析。

=== RILRequest ===
RILRequest代表一个RIL请求，RILJ中AT相关的命令都会通过RILRequest.obtain(...)方法转化为系统支持的RIL_REQUEST_*格式指令，这些指令定义在RILConstants.java中，并且必须与rild中的定义对应，这也是我们开头提到的RILJ与RILD通信规范，方法最后会生成一个RILRequest对象，该对象会被发送到RILSender线程进行解析并通过rild scoket发送出去。

RILRequest内部维护了一个`MAX_POOL_SIZE`大小的请求池，通过obtain()和release()方法从请求池中获取和放回一个请求。

{{{class="brush: java"
    static RILRequest obtain(int request, Message result) {
        RILRequest rr = null;

        //从请求池中获取请求
        synchronized(sPoolSync) {
            if (sPool != null) {
                rr = sPool;
                sPool = rr.mNext;
                rr.mNext = null;
                sPoolSize--;
            }
        }

        //如果请求池中没有可用的请求，则构建一个新的请求
        if (rr == null) {
            rr = new RILRequest();
        }

        //设置请求的序列号
        synchronized(sSerialMonitor) {
            rr.mSerial = sNextSerial++;
        }
        rr.mRequest = request; //设置请求的request，这个request必须是RIL_REQUEST_*格式
        rr.mResult = result; //设置响应该请求处理结果的handler
        rr.mp = Parcel.obtain();

        if (result != null && result.getTarget() == null) {
            throw new NullPointerException("Message target must not be null");
        }

        // first elements in any RIL Parcel
        rr.mp.writeInt(request);    //将请求信息打包
        rr.mp.writeInt(rr.mSerial); //将请求序列号打包

        return rr;
    }

    void release() {
        synchronized (sPoolSync) {
        //如果当前请求池大小小于MAX_POOL_SIZE,则将释放的请求放入请求池。
            if (sPoolSize < MAX_POOL_SIZE) {
                this.mNext = sPool;
                sPool = this;
                sPoolSize++;
                mResult = null;
            }
        }
    }
    
    //当请求处理出现异常时，使用该函数将错误信息发送回初始请求的处理handler
    void
    onError(int error, Object ret) {
        CommandException ex;

        ex = CommandException.fromRilErrno(error);

        if (mResult != null) {
            //AsyncResult是一个工具类，用于封装RILD反馈的信息
            AsyncResult.forMessage(mResult, ret, ex);
            mResult.sendToTarget();
        }

        //异常时mp已经没有用了，直接回收。
        if (mp != null) {
            mp.recycle();
            mp = null;
        }
    }
}}}

接下来我们会看到，RILJ与RILD之间的通信使用的是异步方式，RILJ将请求发送到RILD之后，并不等待处理RILD的反馈就直接返回了，那么，RILD处理完请求并将结果反馈到RILJ后，如何知道是那一条请求的处理结果呢？

答案就是RILRequest中的mSerial参数，每条RIL请求都有一个唯一的序列号，并与请求的实际内容一起发送给RILD，RILD在处理结束后，将该序列号与处理结果一起发送给RILJ，根据这个序列号，在请求列表中找到对应的RIL请求。这个流程我们后面会看到。

=== RIL类 ===
RIL类继承自BaseCommands并实现CommandsInterface接口，在RIL构造时，会创建两个工作线程SenderThread和ReceiverThread,由这两个工作线程的名字也可以看出，一个用于发送请求，一个用于处理响应。RIL所有与AT指令相关的命令都由这两个线程处理。

下面我们分析RIL的构造函数：
{{{class="brush: java"
    public RIL(Context context, int preferredNetworkType, int cdmaSubscription) {
        super(context);
        
        mCdmaSubscription  = cdmaSubscription;
        mPreferredNetworkType = preferredNetworkType;
        mPhoneType = RILConstants.NO_PHONE;

        //创建wakelock
        PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, LOG_TAG);
        mWakeLock.setReferenceCounted(false);
        mWakeLockTimeout = SystemProperties.getInt(TelephonyProperties.PROPERTY_WAKE_LOCK_TIMEOUT,
                DEFAULT_WAKE_LOCK_TIMEOUT);
        mRequestMessagesPending = 0;    //待发送的请求计数
        mRequestMessagesWaiting = 0;    //等待处理结果的请求计数

        //创建一个RILSender名称的Handler线程
        mSenderThread = new HandlerThread("RILSender");
        mSenderThread.start();

        //将RILSender线程与RILSender关联
        Looper looper = mSenderThread.getLooper();
        mSender = new RILSender(looper);

        //判断是否支持移动网络
        ConnectivityManager cm = (ConnectivityManager)context.getSystemService(
                Context.CONNECTIVITY_SERVICE);
        if (cm.isNetworkSupported(ConnectivityManager.TYPE_MOBILE) == false) {
            //不支持移动网络，则不开启RILReceiver
            riljLog("Not starting RILReceiver: wifi-only");
        } else {
            riljLog("Starting RILReceiver");
            //创建一个RILReceiver线程，用于接受RILD发回的数据
            mReceiver = new RILReceiver();
            mReceiverThread = new Thread(mReceiver, "RILReceiver");
            mReceiverThread.start();

            IntentFilter filter = new IntentFilter();
            filter.addAction(Intent.ACTION_SCREEN_ON);
            filter.addAction(Intent.ACTION_SCREEN_OFF);
            context.registerReceiver(mIntentReceiver, filter);
        }
    }
}}}

RIL类中有三个重要的属性：

1、`int mRequestMessagesPending;`
    待发送的请求计数，在调用EVENT_SEND命令之前计数增加，在处理EVENT_SEND时计数减少，当发生WAKE_LOCK_TIMEOUT超时时清0。

2、`int mRequestMessagesWaiting;`
    已发送但等待响应的请求计数，在发送请求时计数增加，处理响应的时候计数减少，他的大小应该与mRequestsList大小相同，除非发生了WAKE_LOCK_TIMEOUT超时。

3、`ArrayList<RILRequest> mRequestsList = new ArrayList<RILRequest>();`
    用于保存等待响应的请求列表，当一个请求已经发送，开始等待响应时，将该请求添加到该列表

后面的分析中我们会看到这三个重要属性的用法。

RIL中其他与AT指令相关的功能，基本都是通过这两个线程来完成,比如：
{{{class="brush: java"
    public void
    supplyIccPinForApp(String pin, String aid, Message result) {
        RILRequest rr = RILRequest.obtain(RIL_REQUEST_ENTER_SIM_PIN, result);

        rr.mp.writeInt(2);
        rr.mp.writeString(pin);
        rr.mp.writeString(aid);

        send(rr);
    }
}}} 
其他功能函数与这个类似，到这里，我们就可以看出发送到rild的请求内容的格式了，注意，这个只是内容的格式，还不是真正通过socket发送的数据,真正发送的数据马上就会看到了。
请求内容格式:

+--------+-----------+---------+
| 请求ID |请求序列号 |请求参数 |
+--------+-----------+---------+

*这里的请求ID我们前面已经说过了，必须是`RILConstants.java`中定义的RIL_REQUEST_*格式。*

send()函数将请求封装为EVENT_SEND消息，交由RILSender处理

{{{class="brush: java"                                        
    private void
    send(RILRequest rr) {
        Message msg;

        //mSocket这里是rild socket,mSocket会在RILReceiver线程中创建
        if (mSocket == null) {
            rr.onError(RADIO_NOT_AVAILABLE, null);
            rr.release();
            return;
        }

        //创建一个EVENT_SEND的message,mSender就是上面的RILSender
        msg = mSender.obtainMessage(EVENT_SEND, rr);

        acquireWakeLock();

        //将请求交给RILSender处理
        msg.sendToTarget();
    }
}}}

这里有一个重要的函数,acquireWakeLock(),可不要被他的名字迷惑，他可不仅仅只是获取wakelock这么简单。
{{{class="brush: java"
    private void
    acquireWakeLock() {
        synchronized (mWakeLock) {
            mWakeLock.acquire();    //获取一个PARTIAL_WAKE_LOCK休眠锁
            mRequestMessagesPending++;  //mRequestMessagesPending＋1

            //定义一个定时器，到时发送EVENT_WAKE_LOCK_TIMEOUT到RILSender
            mSender.removeMessages(EVENT_WAKE_LOCK_TIMEOUT);
            Message msg = mSender.obtainMessage(EVENT_WAKE_LOCK_TIMEOUT);
            mSender.sendMessageDelayed(msg, mWakeLockTimeout);
        }
    }
    //mWakeLockTimeout默认为
    private static final int DEFAULT_WAKE_LOCK_TIMEOUT = 60000;
}}}
acquireWakeLock()做了三个工作：
# 获取PARTIAL_WAKE_LOCK，使CPU不进入休眠
# 使待发送请求计数+1
# 定义一个超时计时器，到时发送EVENT_WAKE_LOCK_TIMEOUT,避免陷入死锁

做好这些工作后，就可以到RILSender中处理EVENT_SEND事件来发送请求了。

=== RILSender ===
RILSender 是一个实现了Runnable接口的Handler子类，所有发送的指令最终都由该handler发送到rild socket
下面看RILSender的实现：
{{{class="brush: java"
    class RILSender extends Handler implements Runnable {
        public RILSender(Looper looper) {
            super(looper);
        }

        // Only allocated once
        byte[] dataLength = new byte[4];

        //目前Runnable接口并没有特殊处理
        public void
        run() {
            //setup if needed
        }


        //***** Handler implementation
        @Override public void
        handleMessage(Message msg) {
            RILRequest rr = (RILRequest)(msg.obj);
            RILRequest req = null;

            switch (msg.what) {
                case EVENT_SEND:
                    /**
                     * mRequestMessagePending++ already happened for every
                     * EVENT_SEND, thus we must make sure
                     * mRequestMessagePending-- happens once and only once
                     */
                    boolean alreadySubtracted = false;
                    try {
                        LocalSocket s;

                        s = mSocket;    //mSocket在RILReceiver线程中创建

                        if (s == null) {
                            //当socket未连接时，发送RADIO_NOT_AVAILABLE错误信息,将请求释放并直接返回
                            rr.onError(RADIO_NOT_AVAILABLE, null);
                            rr.release();
                            if (mRequestMessagesPending > 0)
                                mRequestMessagesPending--;
                            alreadySubtracted = true;
                            return;
                        }

                        //mRequestsList是RIL中维护的一个RIL请求列表，用于保存已发送并等待处理结果的RIL请求
                        synchronized (mRequestsList) {
                            mRequestsList.add(rr);
                            mRequestMessagesWaiting++;  //待反馈请求计数＋1
                        }

                        if (mRequestMessagesPending > 0)
                            mRequestMessagesPending--;  //待发送请求计数-1
                        alreadySubtracted = true;

                        byte[] data;

                        //将请求内容从Parcel中取出
                        data = rr.mp.marshall();
                        rr.mp.recycle();
                        rr.mp = null;

                        if (data.length > RIL_MAX_COMMAND_BYTES) {
                            throw new RuntimeException(
                                    "Parcel larger than max bytes allowed! "
                                                          + data.length);
                        }

                        //将数据包的长度以大端表示
                        dataLength[0] = dataLength[1] = 0;
                        dataLength[2] = (byte)((data.length >> 8) & 0xff);
                        dataLength[3] = (byte)((data.length) & 0xff);

                        //通过socket将数据包的长度和数据包发出
                        s.getOutputStream().write(dataLength);
                        s.getOutputStream().write(data);
                    } catch (IOException ex) {
                        //通过socket发送时出现IO异常处理
                        //此时请求已经添加到RequestList中，所以根据请求的序列号，从RequestList中删除该请求
                        req = findAndRemoveRequestFromList(rr.mSerial);
                        //处理异常请求
                        if (req != null || !alreadySubtracted) {
                            rr.onError(RADIO_NOT_AVAILABLE, null);
                            rr.release();
                        }
                    } catch (RuntimeException exc) {
                        //处理数据长度过长时抛出的运行时异常处理
                        //此时请求已经添加到RequestList中，所以需要从RequestList中删除该请求
                        req = findAndRemoveRequestFromList(rr.mSerial);
                        //处理异常请求
                        if (req != null || !alreadySubtracted) {
                            rr.onError(GENERIC_FAILURE, null);
                            rr.release();
                        }
                    } finally {
                        //当没有待处理的请求和等待处理结果的请求时，使用下面函数取消EVENT_WAKE_LOCK_TIMEOUT超时，并释放mWakeLock。
                        releaseWakeLockIfDone();
                    }

                    //异常时，待发送请求计数-1
                    if (!alreadySubtracted && mRequestMessagesPending > 0) {
                        mRequestMessagesPending--;
                    }

                    break;

                case EVENT_WAKE_LOCK_TIMEOUT:
                    //等待反馈结果超时处理
                    synchronized (mWakeLock) {
                        if (mWakeLock.isHeld()) {
                            if (mRequestMessagesWaiting != 0) {
                                //将等待反馈结果的请求计数清0，但并不从mRequestList中删除，这样当响应最终到达时，仍然可以找到对应的请求
                                mRequestMessagesWaiting = 0;

                            }
                            //因为每次在发送请求的时候，都会重新设定EVENT_WAKE_LOCK_TIMEOUT,所以在EVENT_WAKE_LOCK_TIMEOUT真正触发时，所有的请求必然已经发送出去，处于等待RILSender发送或者接收rild响应的状态时出现异常，此时强制mRequestMessagesPending计数清0
                            if (mRequestMessagesPending != 0) {
                                Log.e(LOG_TAG, "ERROR: mReqPending is NOT 0 but"
                                        + mRequestMessagesPending + " at TIMEOUT, reset!");
                                mRequestMessagesPending = 0;

                            }
                            //释放休眠锁
                            mWakeLock.release();
                        }
                    }
                    break;
            }
        }
    }
}}}

总体来说，RILSender是RILJ层控制发送请求的工作线程，所有RILJ下发的指令，最后都封装为RILRequest由RILSender线程发送到rild socket。

上面分析完了RIL如何发送指令，下面接着来分析RILJ如何接受和处理RILD发送过来的信息。

=== RILReceiver ===
RILReceiver用于实时监控rild socket,当从rild socket接收到数据后，通过对数据进行解析后，调用相应的处理函数。

从RIL的构造函数中，开启了一个名为RILReceiver的工作线程。该线程是一个死循环，其处理流程如下：

# 连接服务器rild socket，
# 阻塞方式等待rild socket 数据发送过来，
# 读取socket 中全部的数据,若服务器socket 关闭或者出现IO 异常,则跳至 6,否则执行下一步
# 对读取的信息进行分类处理，调用相应的回调函数，
# 重新执行步骤 2 
# 关闭本地socket,清空请求列表,然后重新执行步骤 1 


下面我们结合代码来分析：
{{{class="brush: java"
    class RILReceiver implements Runnable {
        byte[] buffer;

        RILReceiver() {
            buffer = new byte[RIL_MAX_COMMAND_BYTES];
        }

        public void
        run() {
            int retryCount = 0;

            try {for (;;) {
                LocalSocket s = null;
                LocalSocketAddress l;
                //创建一个SOCKET_NAME_RIL的客户端socket,并连接服务器socket
                //这里SOCKET_NAME_RIL定义为
                //static final String SOCKET_NAME_RIL = "rild";
                
                try {
                    s = new LocalSocket();
                    l = new LocalSocketAddress(SOCKET_NAME_RIL,
                            LocalSocketAddress.Namespace.RESERVED);
                    s.connect(l);
                } catch (IOException ex){
                    ......
                }

                retryCount = 0;

                mSocket = s;    //给mSocket赋值,供RILSender使用

                int length = 0;
                try {
                    InputStream is = mSocket.getInputStream();

                    for (;;) {
                        Parcel p;
                        //从socket中读取数据，此方法会一直堵塞，直到socket中有数据或服务器端socket关闭或者出现IO异常
                        length = readRilMessage(is, buffer);

                        //当服务器socket关闭时，返回-1
                        if (length < 0) {
                            // End-of-stream reached
                            break;
                        }

                        //对读取的数据进行反编码
                        p = Parcel.obtain();
                        p.unmarshall(buffer, 0, length);
                        p.setDataPosition(0);

                        //对数据进行处理
                        processResponse(p);
                        p.recycle();
                    }
                } catch (java.io.IOException ex) {
                    Log.i(LOG_TAG, "'" + SOCKET_NAME_RIL + "' socket closed",
                          ex);
                } catch (Throwable tr) {
                    Log.e(LOG_TAG, "Uncaught exception read length=" + length +
                        "Exception:" + tr.toString());
                }

                //服务器socket关闭或出现IO异常时，关闭本地socket并清空请求列表
                setRadioState (RadioState.RADIO_UNAVAILABLE);

                try {
                    mSocket.close();
                } catch (IOException ex) {
                }

                mSocket = null;
                RILRequest.resetSerial();

                // Clear request list on close
                clearRequestsList(RADIO_NOT_AVAILABLE, false);
            }} catch (Throwable tr) {
                Log.e(LOG_TAG,"Uncaught exception", tr);
            }

            /* We're disconnected so we don't know the ril version */
            notifyRegistrantsRilConnectionChanged(-1);
        }
    }
}}}

了解了总体的流程后，接着来分析每一个步骤：
1 使用readRilMessage(...)从服务器socket中读取发送过来的一条完整的RIL信息，每条RIL信息由一个4字节的数据长度（采用小端表示法）和一连串的字节组成。
{{{class="brush: java"
    private static int readRilMessage(InputStream is, byte[] buffer)
            throws IOException {
        int countRead;
        int offset;
        int remaining;
        int messageLength;

        // First, read in the length of the message
        offset = 0;
        remaining = 4;
        //首先读取4个字节，这4个字节表示socket接下来发送的信息的长度，这也是socket编程常用的格式：数据长度＋数据内容
        do {
            countRead = is.read(buffer, offset, remaining);

            if (countRead < 0 ) {
                Log.e(LOG_TAG, "Hit EOS reading message length");
                return -1;
            }

            offset += countRead;
            remaining -= countRead;
        } while (remaining > 0);

        //对数据长度重新解析
        messageLength = ((buffer[0] & 0xff) << 24)
                | ((buffer[1] & 0xff) << 16)
                | ((buffer[2] & 0xff) << 8)
                | (buffer[3] & 0xff);

        // Then, re-use the buffer and read in the message itself
        offset = 0;
        remaining = messageLength;
        //读取真正的信息内容
        do {
            countRead = is.read(buffer, offset, remaining);

            if (countRead < 0 ) {
                Log.e(LOG_TAG, "Hit EOS reading message.  messageLength=" + messageLength
                        + " remaining=" + remaining);
                return -1;  //若服务端socket关闭，返回-1
            }

            offset += countRead;
            remaining -= countRead;
        } while (remaining > 0);

        //返回信息真实的长度
        return messageLength;
    }
}}}

这里我们可以看出，RILReader一次只会读取一条RIL信息，如果服务器端连续往socket中放置多个RIL信息，RILReader也会逐条读出。

2 使用processResponse(...)处理获取的信息。服务端在信息的头部加了一个整数来区分当前的信息属于solicited response还是unsolicited response,RILJ通过判断这个参数，对信息进行分类处理
{{{class="brush: java"
    private void
    processResponse (Parcel p) {
        int type;

        type = p.readInt();

        if (type == RESPONSE_UNSOLICITED) {
            //处理非请求的回复
            processUnsolicited (p);
        } else if (type == RESPONSE_SOLICITED) {
            //处理请求的回复
            processSolicited (p);
        }

        releaseWakeLockIfDone();
    }
}}}
接下来对这两种情况分别分析：

1, 非请求的回复(UNSOLICITED RESPONSE),是客户端未做请求而modem主动上报的回复，比如modem主动上报网络状态变化，通话状态等

{{{class="brush: java"
    private void
    processUnsolicited (Parcel p) {
        int response;
        Object ret;

        //读取具体的响应命令
        response = p.readInt();

        //解析反馈的响应结果
        try {switch(response) {
            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED: ret =  responseVoid(p); break;
            case RIL_UNSOL_RESPONSE_NEW_SMS: ret =  responseString(p); break;
            case RIL_UNSOL_RESPONSE_NEW_SMS_ON_SIM: ret =  responseInts(p); break;
            case RIL_UNSOL_ON_USSD: ret =  responseStrings(p); break;
            case RIL_UNSOL_NITZ_TIME_RECEIVED: ret =  responseString(p); break;
            case RIL_UNSOL_SIGNAL_STRENGTH: ret = responseSignalStrength(p); break;
            case RIL_UNSOL_DATA_CALL_LIST_CHANGED: ret = responseDataCallList(p);break;
            case RIL_UNSOL_SUPP_SVC_NOTIFICATION: ret = responseSuppServiceNotification(p); break;
            case RIL_UNSOL_CALL_RING: ret =  responseCallRing(p); break;
            case RIL_UNSOL_RESPONSE_NEW_BROADCAST_SMS:  ret =  responseRaw(p); break;
            ......
            default:
                throw new RuntimeException("Unrecognized unsol response: " + response);
            //break; (implied)
        }} catch (Throwable tr) {
            Log.e(LOG_TAG, "Exception processing unsol response: " + response +
                "Exception:" + tr.toString());
            return;
        }

        //针对不同的结果，Telephony Framework作出相应的状态调整和通知
        switch(response) {
            case RIL_UNSOL_RESPONSE_RADIO_STATE_CHANGED:
                /* has bonus radio state int */
                RadioState newState = getRadioStateFromInt(p.readInt());

                switchToRadioState(newState);
            break;
            case RIL_UNSOL_RESPONSE_CALL_STATE_CHANGED:
                if (RILJ_LOGD) unsljLog(response);

                mCallStateRegistrants
                    .notifyRegistrants(new AsyncResult(null, null, null));
            break;
            case RIL_UNSOL_RESPONSE_VOICE_NETWORK_STATE_CHANGED:
                if (RILJ_LOGD) unsljLog(response);

                mVoiceNetworkStateRegistrants
                    .notifyRegistrants(new AsyncResult(null, null, null));
            break;
            ......
        }
    }
}}}

通过上面的函数，我们可以看到几点：
# 函数处理的都是RIL_UNSOL_RESPONSE_开头的响应，即仅处理主动上报的回复
# 在处理完上报的结果后，更改系统状态，开始通知对该事件感兴趣的侦听者

接着来看看如何将事件通知给侦听者的

上面我们已经说过，RIL的父类BaseCommands提供了对各种事件进行注册侦听的方法的实现，Telephonoy Framework层提供给上层使用的注册侦听的方法最终都是调用BaseCommands的实现，BaseCommands将侦听者的信息封装到单个Registrant或添加到RegistrantList列表中以备后用。

当modem上报事件由RILReceiver处理后，RILReceiver将处理的结果封装到一个AsyncResult对象中，然后调用相应的Registrant或者RegistrantList 来通知上层，如果不清楚RegistrantList 如何将结果通知上层，可以看前面我们在PhoneBase中的介绍。

2, 经过请求的回复(SOLICITED RESPONSE),即modem针对客户端发送的请求而返回的响应，比如这对客户端查询网络状态，拨打电话等请求的回复。

{{{class="brush: java"
    private void
    processSolicited (Parcel p) {
        int serial, error;
        boolean found = false;

        serial = p.readInt();   //获取请求的序列号
        error = p.readInt();    //获取请求的处理结果，0成功，非0失败

        RILRequest rr;

        //从请求列表中根据序列号找到对应的请求
        rr = findAndRemoveRequestFromList(serial);

        if (rr == null) {
            Log.w(LOG_TAG, "Unexpected solicited response! sn: "
                            + serial + " error: " + error);
            return;
        }

        Object ret = null;

        //跟unsolicted response一样处理，当请求处理成功，接着处理反馈的数据
        if (error == 0 || p.dataAvail() > 0) {
            try {switch (rr.mRequest) {
            case RIL_REQUEST_GET_SIM_STATUS: ret =  responseIccCardStatus(p); break;
            case RIL_REQUEST_ENTER_SIM_PIN: ret =  responseInts(p); break;
            case RIL_REQUEST_GET_CURRENT_CALLS: ret =  responseCallList(p); break;
            case RIL_REQUEST_DIAL: ret =  responseVoid(p); break;
            case RIL_REQUEST_GET_IMSI: ret =  responseString(p); break;
            case RIL_REQUEST_HANGUP_WAITING_OR_BACKGROUND: ret =  responseVoid(p); break;
            case RIL_REQUEST_LAST_CALL_FAIL_CAUSE: ret =  responseInts(p); break;
            case RIL_REQUEST_VOICE_REGISTRATION_STATE: ret =  responseStrings(p); break;
            ......
            default:
                throw new RuntimeException("Unrecognized solicited response: " + rr.mRequest);
            //break;
            }} catch (Throwable tr) {
                // Exceptions here usually mean invalid RIL responses
                //出错时，将异常信息发送给注册者
                if (rr.mResult != null) {
                    AsyncResult.forMessage(rr.mResult, null, tr);
                    rr.mResult.sendToTarget();
                }
                rr.release();
                return;
            }
        }

        if (error != 0) {
            //当请求处理失败，由RILRequest的onError(）处理，这也会把异常信息发送给注册者
            rr.onError(error, ret);
            rr.release();
            return;
        }

        //如果没有错误，发送反馈数据给注册者
        if (rr.mResult != null) {
            AsyncResult.forMessage(rr.mResult, ret, null);
            rr.mResult.sendToTarget();
        }

        rr.release();
    }
}}}

由于处理的是非主动上报的信息，所以处理时需要根据rild反馈信息中的请求序列号，从请求列表中找到对应的RILRequest,RILRequest中包含一个Message对象，Message对象中指定了这个Message的target Handler,所以processSolicited(）只要将请求的反馈信息封装到这个Message对象的obj中，然后调用sendToTarget(）即可。

RILJ的分析已经结束了，趁热打铁，我们接着分析RILC的实现方式，请转到[[android_rilc|Android RILC实现]]
