%template code_3
%toc

= GSMPhone详细分析 =

从前面的分析我们可以看到，PhoneFactory根据实际的网络类型来创建对应的Phone类型，在实例化GSMPhone时，创建与电话功能相关的各个功能模块：

GSMPhone.java

{{{class="brush: java"
    public
    GSMPhone (Context context, CommandsInterface ci, PhoneNotifier notifier, boolean unitTestMode) {
        super(notifier, context, ci, unitTestMode);

        ......

        //设置Phone的类型为GSM
        mCM.setPhoneType(Phone.PHONE_TYPE_GSM);
        //创建电话相关的各个模块
        mCT = new GsmCallTracker(this);
        mSST = new GsmServiceStateTracker (this);
        mSMS = new GsmSMSDispatcher(this, mSmsStorageMonitor, mSmsUsageMonitor);
        mIccFileHandler = new SIMFileHandler(this);
        mIccRecords = new SIMRecords(this);
        mDataConnectionTracker = new GsmDataConnectionTracker (this);
        mIccCard = new SimCard(this);
        ......
        mStkService = CatService.getInstance(mCM, mIccRecords, mContext, mIccFileHandler, mIccCard);
        //注册事件响应
        mCM.registerForAvailable(this, EVENT_RADIO_AVAILABLE, null);
        mIccRecords.registerForRecordsLoaded(this, EVENT_SIM_RECORDS_LOADED, null);
        mCM.registerForOffOrNotAvailable(this, EVENT_RADIO_OFF_OR_NOT_AVAILABLE, null);
        mCM.registerForOn(this, EVENT_RADIO_ON, null);
        mCM.setOnUSSD(this, EVENT_USSD, null);
        mCM.setOnSuppServiceNotification(this, EVENT_SSN, null);
        mSST.registerForNetworkAttached(this, EVENT_REGISTERED_TO_NETWORK, null);

        ......
        //Change the system property
        SystemProperties.set(TelephonyProperties.CURRENT_ACTIVE_PHONE,
                new Integer(Phone.PHONE_TYPE_GSM).toString());
    }
}}}

可以看到GSMPhone的实现方式非常精妙，将电话各个功能模块化,由各个模块负责具体的功能:
- GsmCallTracker            负责通话功能实现和管理通话状态
- GsmServiceStateTracker    负责数据上网功能实现和管理数据服务状态
- GsmSMSDispatcher          负责短信发送接受
- SIMFileHandler            负责SIM卡文件管理
- SIMRecords                负责SIM卡记录管理
- GsmDataConnectionTracker  负责数据链接管理
- SimCard                   负责Sim卡管理 
- CommandsInterface         负责与rild进程交互,将上层命令通过socket发送给rild并接受反馈信息
- PhoneNotifier             负责将信息发送到framework层
- CatService                负责Cat服务

最后注册部分事件监听。

可以看出，GSMPhone支持的所有功能，最后都由各个功能模块负责了，下面以手动选择网络模式作为例子分析：
{{{class="brush: java"
    public void
    selectNetworkManually(OperatorInfo network,
            Message response) {
        //将参数重新封装为NetworkSelectiMessage对象
        NetworkSelectMessage nsm = new NetworkSelectMessage();
        nsm.message = response; //保存最初的请求Message
        nsm.operatorNumeric = network.getOperatorNumeric();
        nsm.operatorAlphaLong = network.getOperatorAlphaLong();

        
        //GSMPhone本身也是一个handler，这里创建了一个EVENT_SET_NETWORK_MANUAL_COMPLETE,将请求再次封装，再次封装的原因，下面会解释。
        Message msg = obtainMessage(EVENT_SET_NETWORK_MANUAL_COMPLETE, nsm);
        //将请求通过CommandsInterface对象发送出去
        mCM.setNetworkSelectionModeManual(network.getOperatorNumeric(), msg);
    }
    //GSMPhone自身对EVENT_SET_NETWORK_MANUAL_COMPLETE事件进行处理
    @Override
    public void handleMessage (Message msg) {
        AsyncResult ar;
        Message onComplete;

        switch (msg.what) {
            ......
            // handle the select network completion callbacks.
            case EVENT_SET_NETWORK_MANUAL_COMPLETE:
            case EVENT_SET_NETWORK_AUTOMATIC_COMPLETE:
                //具体的处理
                handleSetSelectNetwork((AsyncResult) msg.obj);
                break;

            ......
             default:
                 super.handleMessage(msg);
        }
    }
     
    private void handleSetSelectNetwork(AsyncResult ar) {
        // look for our wrapper within the asyncresult, skip the rest if it
        // is null.
        if (!(ar.userObj instanceof NetworkSelectMessage)) {
            if (LOCAL_DEBUG) Log.d(LOG_TAG, "unexpected result from user object.");
            return;
        }

        NetworkSelectMessage nsm = (NetworkSelectMessage) ar.userObj;

        // found the object, now we send off the message we had originally
        // attached to the request.
        if (nsm.message != null) {
            //将最初的Message发送出去
            AsyncResult.forMessage(nsm.message, ar.result, ar.exception);
            nsm.message.sendToTarget();
        }

        //这里我们会看到系统对该请求再次封装的原因：因为系统需要保存网络信息。如果对处理结果不感兴趣，也就无需多次封装了。
        // open the shared preferences editor, and write the value.
        // nsm.operatorNumeric is "" if we're in automatic.selection.
        SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(getContext());
        SharedPreferences.Editor editor = sp.edit();
        editor.putString(NETWORK_SELECTION_KEY, nsm.operatorNumeric);
        editor.putString(NETWORK_SELECTION_NAME_KEY, nsm.operatorAlphaLong);

        // commit and log the result.
        if (! editor.commit()) {
            Log.e(LOG_TAG, "failed to commit network selection preference");
        }

    }
}}}


简单的了解了GSMPhone的处理流程之后，我们对各个组成模块进行详细分析：

== CommandsInterface ==
CommandsInterface接口定义了所有可以与rild 守护进程进行交互的操作，也是telephony framework层可以使用的所有接口，具体的分析请看[[android_rilj|android RILJ实现]]

== CallTracker ==
CallTracker,顾名思义，Telephony Framework中负责通话管理，是一个抽象类，具体的实现根据网络模式的不同，分为GSMCallTracker和CDMACallTracker,具体的分析请看[[android_calltracker|android CallTracker>]]


